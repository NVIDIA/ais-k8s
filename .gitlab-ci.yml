image: ubuntu:22.04

stages:
  - build
  - test:short
  - test:long
  - push

# NOTE: uses default tag ':latest', as in: 'aistorage/aisnode:latest'
variables:
  ADMIN_IMAGE: "aistorage/admin"
  AISNODE_IMAGE: "aistorage/aisnode"
  TEST_ALLOW_SHARED_NO_DISKS: "true"

before_script:
  - apt-get update -y --allow-releaseinfo-change && apt install -y docker.io build-essential
  - |
    echo '{"storage-driver": "vfs"}' >> /etc/docker/daemon.json
  - nohup dockerd >/dev/null 2>&1 & sleep 10
  - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD


.default_only_template: &default_only_def
  only:
    - master
    - merge_requests
    - schedules

build:operator:lint:
  stage: build
  image: aistorage/ci:latest
  timeout: 10m
  <<: *default_only_def
  script:
    - cd operator
    - make lint
    - make fmt-check
    - make spell-check

build:operator:
  stage: build
  image: aistorage/ci:latest
  timeout: 10m
  <<: *default_only_def
  script:
    - make -C operator manager

operator:minikube:short:
  stage: test:short
  needs: ["build:operator:lint", "build:operator"]
  image: aistorage/ci:latest
  <<: *default_only_def
  tags:
    - ais-k8s
  timeout: 30m
  script:
    - make -C operator test-short

operator:minikube:long:
  stage: test:long
  needs: ["operator:minikube:short"]
  image: aistorage/ci:latest
  tags:
    - ais-k8s
  timeout: 40m
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - operator/*
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: manual
      allow_failure: true
  script:
    - make -C operator test

operator:minikube:metallb:
  stage: test:long
  needs: ["operator:minikube:short"]
  image: aistorage/ci:latest
  variables:
    # NOTE: No particular reason why these addresses would be unavailable.
    EXTERNAL_ADDRESSES: 172.20.0.100â€“172.20.0.120
  tags:
    - ais-k8s
  timeout: 20m
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: manual
      allow_failure: true
  before_script:
    - apt-get install gettext-base
    - make -C operator deploy-metallb
  script:
    - make -C operator test
  after_script:
    - make -C operator undeploy-metallb

.operator_gcp:
  stage: test:long
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
  # If minikube fails - don't bother to try GCP.
  needs: ["operator:minikube:short"]
  image: aistorage/ci:latest
  timeout: 60m
  variables:
    GOOGLE_APPLICATION_CREDENTIALS: "/tmp/gcs.json"
  before_script:
    - apt-get update -y && apt install -y build-essential
    - make -C terraform ci-prepare
    - echo "${GOOGLE_APPLICATION_CREDENTIALS_JSON}" > "${GOOGLE_APPLICATION_CREDENTIALS}"
  script:
    - make -C terraform ci-deploy-k8s
    - make -C operator test
  after_script:
    - make -C terraform destroy

operator:gcp:
  extends: .operator_gcp
  rules:
  - if: '$CI_PIPELINE_SOURCE == "schedule"'
  - if: '$CI_MERGE_REQUEST_LABELS =~ /.*skip-ci-gcp.*/'
    when: manual
    allow_failure: true
  # TODO -- FIXME: GCP tests always fail, skipping automatic running of pipeline for now.
  # - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
  #   changes:
  #     - operator/*
  #     - terraform/*
  - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    when: manual
    allow_failure: true
  script:
    - make -C terraform ci-deploy-k8s
    - make -C operator test

operator:gcp:cilium:
  extends: .operator_gcp
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: manual
      allow_failure: true
  script:
    - make -C terraform ci-deploy-k8s ARGS="cilium"
    - make -C operator test

helm:gcp:
  stage: test:long
  # Run immediately, don't require build:operator.
  needs: []
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
    - if: '$CI_MERGE_REQUEST_LABELS =~ /.*skip-ci-gcp.*/'
      when: manual
      allow_failure: true
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - terraform/*
        - helm/*
      allow_failure: true # TODO: Remove once pipeline is fully stable.
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: manual
      allow_failure: true
  variables:
    GOOGLE_APPLICATION_CREDENTIALS: "/tmp/gcs.json"
  before_script:
    - apt-get update -y && apt install -y build-essential
    - make -C terraform ci-prepare
    - echo "${GOOGLE_APPLICATION_CREDENTIALS_JSON}" > "${GOOGLE_APPLICATION_CREDENTIALS}"
  script:
    - make -C terraform ci-deploy
    - make -C terraform ci-test
  after_script:
    - make -C terraform destroy
